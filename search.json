[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 clipboardjs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/clipboardjs.html","id":"withcopy","dir":"Articles","previous_headings":"","what":"withCopy()","title":"clipboardjs","text":"function adds necessary tags existing button link enable copy functionality. Note class clippyjs added, clipboard.js know buttons watch. withCopy() particularly useful want add copy buttons don’t effect reactive graph.","code":"test_ab <- actionButton(\"copy_1\", \"A copy button\")  print(test_ab) #> <button id=\"copy_1\" type=\"button\" class=\"btn btn-default action-button\">A copy button<\/button>  print(   withCopy(test_ab, text = \"I will end up on the clipboard!\") ) #> <button class=\"btn btn-default action-button clippyjs\" data-clipboard-text=\"I will end up on the clipboard!\" id=\"copy_1\" type=\"button\">A copy button<\/button> print(   withCopy(tags$button(id = \"cp1\", \"A low cost button\"), text = \"copied text\") ) #> <button id=\"cp1\" class=\"clippyjs\" data-clipboard-text=\"copied text\">A low cost button<\/button>"},{"path":"/articles/clipboardjs.html","id":"copybutton","dir":"Articles","previous_headings":"","what":"copyButton()","title":"clipboardjs","text":"quickly create copy button sensible defaults use copyButton().","code":"print(   copyButton(\"cp2\", text = \"This text shall move.\") ) #> <button class=\"btn btn-default action-button clippyjs\" data-clipboard-text=\"This text shall move.\" id=\"cp2\" type=\"button\">Copy<\/button>"},{"path":"/articles/clipboardjs.html","id":"updatecopytext","dir":"Articles","previous_headings":"","what":"updateCopyText()","title":"clipboardjs","text":"want set copied content server-side, updateCopyText() let . Note setting data.frame like objects copied text takes little pre-processing work expected. pasteable() function converts data.frames format works well spreadsheet targets.","code":"ui <- fluidPage(   copyButton(\"cp3\", text = \"You'll never see this!\", label = \"Copy from Server\") )  server <- function(input, output, session) {   # Server side copy   updateCopyText(\"cp3\", \"This has been updated from the server.\") } #pasteable(mtcars)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nick DiQuattro. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"DiQuattro N (2022). clipboardjs: Clipboardjs Wrapper. R package version 0.1.0, https://github.com/ndiquattro/clipboardjs.","code":"@Manual{,   title = {clipboardjs: Clipboardjs Wrapper},   author = {Nick DiQuattro},   year = {2022},   note = {R package version 0.1.0},   url = {https://github.com/ndiquattro/clipboardjs}, }"},{"path":"/index.html","id":"clipboardjs","dir":"","previous_headings":"","what":"Clipboardjs Wrapper","title":"Clipboardjs Wrapper","text":"goal clipboardjs wrap clipboard.js easy use Shiny.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Clipboardjs Wrapper","text":"can install development version clipboardjs like :","code":"# install.packages(\"remotes\") remotes::install_github(\"ndiquattro/clipboardjs\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Clipboardjs Wrapper","text":"’s demo adding Copy buttons copy output UI elements user’s clipboard;","code":"library(shiny) library(clipboardjs)  ui <- fluidPage(   # Tests   textOutput(\"tout\"),   textOutput(\"tout2\"),   textOutput(\"tout3\"),    # Add copying to action*   withCopy(actionLink(\"copyb1\", \"Copy\", icon = icon(\"clipboard\")),   target = \"tout\"),   withCopy(actionButton(\"copyb2\", \"Copy\", icon = icon(\"clipboard\")), target = \"tout2\"),    # Quick Copy button   copyButton(\"cp1\", target_id = \"tout3\", icon = icon(\"clipboard\")),    # Define the text you want to copy   copyButton(\"cp2\", text = \"This is the text you want!\", label = \"Copy Text\"),    # The value is changed server side   copyButton(\"cp3\", text = \"You'll never see this!\", label = \"Copy from Server\"),    # Testing area   textInput(\"text\", label = \"Input\", placeholder = \"Paste here to check\") )  server <- function(input, output, session) {   output$tout   <- renderText(\"The first copy\")   output$tout2  <- renderText(\"Second copy\")   output$tout3  <- renderText(\"Third copy\")    # Server side copy   updateCopyText(\"cp3\", \"This has been updated from the server.\")  }  shinyApp(ui, server)"},{"path":"/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"Clipboardjs Wrapper","text":"rclipboard shinyCopy2clipboard","code":""},{"path":"/reference/copyButton.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy button — copyButton","title":"Copy button — copyButton","text":"Create copy button copy contents target UI element provided value clipboard.","code":""},{"path":"/reference/copyButton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy button — copyButton","text":"","code":"copyButton(id, target_id = NULL, text = NULL, cut = FALSE, label = \"Copy\", ...)"},{"path":"/reference/copyButton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy button — copyButton","text":"id inputId underlying actionButton. target_id id UI output copy. text Value copy clipboard button clicked. cut Cut text clipboard. label Label button. ... arguments passed shiny::actionButton().","code":""},{"path":"/reference/copyButton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy button — copyButton","text":"actionButton enabled copy clipboard.","code":""},{"path":"/reference/copyButton.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy button — copyButton","text":"update value copied server see updateCopyText().","code":""},{"path":"/reference/copyButton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy button — copyButton","text":"","code":"if (interactive()) {   ui <- fluidPage(     textOutput(\"test_text\"),      # Copy other output     copyButton(\"cp1\", target_id = \"test_text\", icon = icon(\"clipboard\")),      # Copy a set value     copyButton(\"cp2\", text = \"This is the text you want!\", label = \"Copy Text\")   )    server <- function(input, output, session) {     output$test_text <- renderText(\"The text we are to copy!\")   }    shinyApp(ui, server) }"},{"path":"/reference/updateCopyText.html","id":null,"dir":"Reference","previous_headings":"","what":"updateCopyText — updateCopyText","title":"updateCopyText — updateCopyText","text":"Change text button copy clipboard server.","code":""},{"path":"/reference/updateCopyText.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"updateCopyText — updateCopyText","text":"","code":"updateCopyText(id, text, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/updateCopyText.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"updateCopyText — updateCopyText","text":"id id button. text Value copy clipboard button clicked. session session object passed function given shinyServer.","code":""},{"path":"/reference/updateCopyText.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"updateCopyText — updateCopyText","text":"","code":"if (interactive()) {   ui <- fluidPage(     # Copy a set value     copyButton(\"cp2\", text = \"The client side text\", label = \"Copy Text\")   )    server <- function(input, output, session) {     updateCopyText(\"cp2\", text = \"The new server side text!\")   }    shinyApp(ui, server) }"},{"path":"/reference/withCopy.html","id":null,"dir":"Reference","previous_headings":"","what":"withCopy — withCopy","title":"withCopy — withCopy","text":"Enable predefined button link interact clipboard.","code":""},{"path":"/reference/withCopy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"withCopy — withCopy","text":"","code":"withCopy(x, target_id = NULL, text = NULL, cut = FALSE)"},{"path":"/reference/withCopy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"withCopy — withCopy","text":"x actionButton actionLink. target_id id UI output copy. text Value copy clipboard button clicked. cut Cut text clipboard.","code":""},{"path":"/reference/withCopy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"withCopy — withCopy","text":"Updated button link.","code":""},{"path":"/reference/withCopy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"withCopy — withCopy","text":"","code":"if (interactive()) {   ui <- fluidPage(     textOutput(\"test_text\"),      # Copy other output     withCopy(actionLink(\"copyb1\",   \"Copy\", icon = icon(\"clipboard\")), target_id = \"test_text\"),     withCopy(actionButton(\"copyb2\", \"Copy\", icon = icon(\"clipboard\")), text = \"copy copy me\"),   )    server <- function(input, output, session) {     output$test_text <- renderText(\"The text we are to copy!\")   }    shinyApp(ui, server) }"}]
